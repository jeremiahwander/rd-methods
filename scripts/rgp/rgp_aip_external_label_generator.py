#!/usr/bin/env python3

"""This python script generates the optional input files used by the AIP for the RGP cohort.

The following output files are generated by this script:
    - rgp_train_external_labels.json
    - rgp_holdout_external_labels.json

usage: rgp_aip_external_label_generator.py [-h]
    --seqr_tag SEQR_TAG
    --group_assignments GROUP_ASSIGNMENTS
    --output_dir OUTPUT_DIR

Options:
    --seqr_tag FILE             path to an export of all tagged variants from seqr, can be defined multiple times, e.g.,
                                --seqr_tag tag1.tsv --seqr_tag tag2.tsv. Multiple files are concatenated.
    --group_assignments FILE    path to a group assignments file.
    --output_dir DIR            path to an output directory to write files to. Defaults to current working directory. If
                                the directory does not exist, it will be created.
    -h, --help                  show this screen
"""

import logging
import os
from argparse import ArgumentParser
from typing import List

import pandas as pd

from lib.seqr.io import ExternalLabelWriter
from lib.seqr.metadata import SeqrTags


def main(seqr_tag: List[str], group_assignments: str, output_dir: str) -> None:
    if not os.path.exists(output_dir):
        logging.warning(f"Output directory {output_dir} does not exist, creating it.")
        os.makedirs(output_dir)

    tags = SeqrTags.parse(seqr_tag)
    assignments = pd.read_csv(group_assignments, sep="\t")

    for group, group_df in assignments.groupby("group"):
        external_label_file = os.path.join(output_dir, f"{group}_external_labels.json")
        logging.info(f"Writing external label file for {group} to {external_label_file}")
        ExternalLabelWriter(tags, families_to_write=group_df.family_id.tolist()).write(external_label_file)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("--seqr_tag", action="append", required=True)
    parser.add_argument("--group_assignments", required=True)
    parser.add_argument("--output_dir", required=False, default=os.getcwd())

    logging.basicConfig(level=logging.INFO)

    args = parser.parse_args()
    main(
        seqr_tag=args.seqr_tag,
        group_assignments=args.group_assignments,
        output_dir=args.output_dir,
    )
